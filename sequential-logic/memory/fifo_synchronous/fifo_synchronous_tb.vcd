$date
	Sun May 21 15:21:47 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module FIFO_SYNCHRONOUS_TB $end
$var wire 1 ! FULL $end
$var wire 1 " EMPTY $end
$var wire 8 # DATA_OUT [7:0] $end
$var parameter 32 $ CLKPERIOD $end
$var reg 1 % CLK $end
$var reg 256 & COMMENT [255:0] $end
$var reg 8 ' DATA_IN [7:0] $end
$var reg 8 ( DATA_OUTEXP [7:0] $end
$var reg 1 ) EMPTYEXP $end
$var reg 32 * ERRORS [31:0] $end
$var reg 1 + FULLEXP $end
$var reg 1 , POP $end
$var reg 1 - PUSH $end
$var reg 1 . RST $end
$var reg 32 / VECTORCOUNT [31:0] $end
$var integer 32 0 COUNT [31:0] $end
$var integer 32 1 FD [31:0] $end
$scope module UUT_fifo_synchronous_structural $end
$var wire 1 % clk $end
$var wire 8 2 data_in [7:0] $end
$var wire 1 , pop $end
$var wire 1 - push $end
$var wire 1 . rst $end
$var wire 4 3 w_ptr [3:0] $end
$var wire 1 4 w_next $end
$var wire 4 5 r_ptr [3:0] $end
$var wire 1 6 r_next $end
$var wire 1 ! full $end
$var wire 1 " empty $end
$var wire 8 7 data_out [7:0] $end
$var parameter 1 8 zero $end
$var parameter 8 9 zeros $end
$scope module compare_and_status_logic $end
$var wire 4 : w_ptr [3:0] $end
$var wire 4 ; r_ptr [3:0] $end
$var parameter 4 < depth $end
$var reg 1 " empty $end
$var reg 1 ! full $end
$var reg 4 = ptr_diff [3:0] $end
$upscope $end
$scope module dual_port_ram_synchronous $end
$var wire 1 % clk $end
$var wire 8 > data_in_A [7:0] $end
$var wire 8 ? data_in_B [7:0] $end
$var wire 1 - we_A $end
$var wire 1 @ we_B $end
$var wire 4 A addr_B [3:0] $end
$var wire 4 B addr_A [3:0] $end
$var parameter 32 C ADDR_WIDTH $end
$var parameter 32 D DATA_WIDTH $end
$var parameter 32 E MEM_DEPTH $end
$var reg 8 F data_out_A [7:0] $end
$var reg 8 G data_out_B [7:0] $end
$upscope $end
$scope module read_logic $end
$var wire 1 " empty $end
$var wire 1 , re $end
$var reg 1 6 r_next $end
$upscope $end
$scope module read_ptr $end
$var wire 1 % clk $end
$var wire 1 6 r_next $end
$var wire 1 . rst $end
$var reg 4 H r_ptr [3:0] $end
$upscope $end
$scope module write_logic $end
$var wire 1 ! full $end
$var wire 1 - we $end
$var reg 1 4 w_next $end
$upscope $end
$scope module write_ptr $end
$var wire 1 % clk $end
$var wire 1 . rst $end
$var wire 1 4 w_next $end
$var reg 4 I w_ptr [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 E
b1000 D
b100 C
b1111 <
b0 9
08
b10100 $
$end
#0
$dumpvars
bx I
bx H
bx G
bx F
bx B
bx A
0@
b0 ?
bx >
bx =
bx ;
bx :
bx 7
06
bx 5
04
bx 3
bx 2
b10000000000000000000000000000011 1
b1000 0
b1 /
0.
0-
0,
x+
b0 *
x)
bx (
bx '
b1001001010011100100100101010100 &
0%
bx #
x"
x!
$end
#100
1%
#200
0%
#250
b10 /
1)
0+
1.
b101001001000101010100110100010101010100 &
#300
1"
0!
b0 =
b0 5
b0 ;
b0 A
b0 H
b0 3
b0 :
b0 B
b0 I
1%
#400
0%
#450
14
b11 /
0)
b1111 '
b1111 2
b1111 >
1-
0.
b10100000101010101010011010010000010110100110001 &
#500
0"
b10 =
b1111 F
b1 3
b1 :
b1 B
b1 I
1%
#600
0%
#650
b100 /
b1111 (
b11110000 '
b11110000 2
b11110000 >
b10100000101010101010011010010000010110100110010 &
#700
b11 =
b10 3
b10 :
b10 B
b10 I
b1111 #
b1111 7
b1111 G
b11110000 F
1%
#800
0%
#850
b101 /
b10101010 '
b10101010 2
b10101010 >
b10100000101010101010011010010000010110100110011 &
#900
b100 =
b10101010 F
b11 3
b11 :
b11 B
b11 I
1%
#1000
0%
#1050
16
b110 /
1,
b11111111 '
b11111111 2
b11111111 >
b1010000010101010101001101001000001101000010110101010000010011110101000000110001 &
#1100
b1 5
b1 ;
b1 A
b1 H
b100 3
b100 :
b100 B
b100 I
b11111111 F
1%
#1200
0%
#1250
04
b111 /
b11110000 (
bx '
bx 2
bx >
0-
b101000001001111010100000010110100110010 &
#1300
b11 =
bx F
b11110000 #
b11110000 7
b11110000 G
b10 5
b10 ;
b10 A
b10 H
1%
#1400
0%
#1450
b1000 /
b10101010 (
b101000001001111010100000010110100110011 &
#1500
b10 =
b11 5
b11 ;
b11 A
b11 H
b10101010 #
b10101010 7
b10101010 G
1%
#1600
0%
#1650
14
b1001 /
b11111111 (
b1010101 '
b1010101 2
b1010101 >
1-
b1010000010101010101001101001000001101010010110101010000010011110101000000110100 &
#1700
b1010101 F
b11111111 #
b11111111 7
b11111111 G
b101 3
b101 :
b101 B
b101 I
b100 5
b100 ;
b100 A
b100 H
1%
#1800
0%
#1850
04
b1010 /
b1010101 (
1)
bx '
bx 2
bx >
0-
b101000001001111010100000010110100110101 &
#1900
06
1"
b0 =
b101 5
b101 ;
b101 A
b101 H
b1010101 #
b1010101 7
b1010101 G
bx F
1%
#2000
0%
#2050
b1011 /
bx (
0,
b101101 &
#2100
bx #
bx 7
bx G
1%
#2200
0%
#2250
b1100 /
#2300
1%
#2400
0%
#2450
b1101 /
#2500
1%
#2600
0%
#2650
14
b1110 /
0)
b10001111 '
b10001111 2
b10001111 >
1-
b10100000101010101010011010010000010110100110110 &
#2700
0"
b10 =
b110 3
b110 :
b110 B
b110 I
b10001111 F
1%
#2800
0%
#2850
b1111 /
b10001111 (
b1110 '
b1110 2
b1110 >
b10100000101010101010011010010000010110100110111 &
#2900
b11 =
b1110 F
b10001111 #
b10001111 7
b10001111 G
b111 3
b111 :
b111 B
b111 I
1%
#3000
0%
#3050
b10000 /
b110011 '
b110011 2
b110011 >
b10100000101010101010011010010000010110100111000 &
#3100
b100 =
b1000 3
b1000 :
b1000 B
b1000 I
b110011 F
1%
#3200
0%
#3250
16
b10001 /
1,
b1111100 '
b1111100 2
b1111100 >
b1010000010101010101001101001000001110010010110101010000010011110101000000110110 &
#3300
b1111100 F
b1001 3
b1001 :
b1001 B
b1001 I
b110 5
b110 ;
b110 A
b110 H
1%
#3400
0%
#3450
06
b10010 /
b1110 (
0,
b1010101 '
b1010101 2
b1010101 >
b1010000010101010101001101001000001011010011000100110000 &
#3500
b101 =
b1010 3
b1010 :
b1010 B
b1010 I
b1110 #
b1110 7
b1110 G
b1010101 F
1%
#3600
0%
#3650
b10011 /
b1010000010101010101001101001000001011010011000100110001 &
#3700
b110 =
b1011 3
b1011 :
b1011 B
b1011 I
1%
#3800
0%
#3850
b10100 /
b1010000010101010101001101001000001011010011000100110010 &
#3900
b111 =
b1100 3
b1100 :
b1100 B
b1100 I
1%
#4000
0%
#4050
b10101 /
b1010000010101010101001101001000001011010011000100110011 &
#4100
b1000 =
b1101 3
b1101 :
b1101 B
b1101 I
1%
#4200
0%
#4250
b10110 /
b1010000010101010101001101001000001011010011000100110100 &
#4300
b1001 =
b1110 3
b1110 :
b1110 B
b1110 I
1%
#4400
0%
#4450
b10111 /
b1010000010101010101001101001000001011010011000100110101 &
#4500
b1010 =
b1111 3
b1111 :
b1111 B
b1111 I
1%
#4600
0%
#4650
b11000 /
b1010000010101010101001101001000001011010011000100110110 &
#4700
b0 3
b0 :
b0 B
b0 I
1%
#4800
0%
#4850
b11001 /
b1010000010101010101001101001000001011010011000100110111 &
#4900
b1011 =
b1 3
b1 :
b1 B
b1 I
1%
#5000
0%
#5050
b11010 /
b1010000010101010101001101001000001011010011000100111000 &
#5100
b1100 =
b10 3
b10 :
b10 B
b10 I
1%
#5200
0%
#5250
b11011 /
b1010000010101010101001101001000001011010011000100111001 &
#5300
b1101 =
b11 3
b11 :
b11 B
b11 I
1%
#5400
0%
#5450
b11100 /
b1010000010101010101001101001000001011010011001000110000 &
#5500
b1110 =
b100 3
b100 :
b100 B
b100 I
1%
#5600
0%
#5650
b11101 /
1+
b1010000010101010101001101001000001011010011001000110001 &
#5700
04
1!
b1111 =
b101 3
b101 :
b101 B
b101 I
1%
#5800
0%
#5850
b11110 /
b1010000010101010101001101001000001011010011001000110010 &
#5900
1%
#6000
0%
#6050
b11111 /
b1010000010101010101001101001000001011010011001000110011 &
#6100
1%
#6200
0%
#6250
16
b100000 /
1,
bx '
bx 2
bx >
0+
0-
b101000001001111010100000010110100110111 &
#6300
0!
b1110 =
b111 5
b111 ;
b111 A
b111 H
1%
#6400
0%
#6450
b100001 /
b110011 (
b101000001001111010100000010110100111000 &
#6500
b1101 =
b110011 #
b110011 7
b110011 G
b1000 5
b1000 ;
b1000 A
b1000 H
1%
#6600
0%
#6650
b100010 /
b1111100 (
b101000001001111010100000010110100111001 &
#6700
b1100 =
b1001 5
b1001 ;
b1001 A
b1001 H
b1111100 #
b1111100 7
b1111100 G
1%
#6800
0%
#6850
b100011 /
b1010101 (
b10100000100111101010000001011010011000100110000 &
#6900
b1011 =
b1010101 #
b1010101 7
b1010101 G
b1010 5
b1010 ;
b1010 A
b1010 H
1%
#7000
0%
#7050
06
b100100 /
0,
b101101 &
#7100
1%
#7200
0%
#7250
b100101 /
#7300
1%
#7400
0%
#7450
b11111111111111111111111111111111 0
