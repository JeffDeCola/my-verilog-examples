$date
	Sat May 20 19:35:04 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module DUAL_PORT_RAM_SYNCHRONOUS_TB $end
$var wire 8 ! DATA_OUT_B [7:0] $end
$var wire 8 " DATA_OUT_A [7:0] $end
$var parameter 32 # CLKPERIOD $end
$var reg 4 $ ADDR_A [3:0] $end
$var reg 4 % ADDR_B [3:0] $end
$var reg 1 & CLK $end
$var reg 256 ' COMMENT [255:0] $end
$var reg 8 ( DATA_IN_A [7:0] $end
$var reg 8 ) DATA_IN_B [7:0] $end
$var reg 8 * DATA_OUTEXP_A [7:0] $end
$var reg 8 + DATA_OUTEXP_B [7:0] $end
$var reg 32 , ERRORS [31:0] $end
$var reg 32 - VECTORCOUNT [31:0] $end
$var reg 1 . WE_A $end
$var reg 1 / WE_B $end
$var integer 32 0 COUNT [31:0] $end
$var integer 32 1 FD [31:0] $end
$scope module UUT_dual_port_ram_synchronous_behavioral $end
$var wire 4 2 addr_A [3:0] $end
$var wire 4 3 addr_B [3:0] $end
$var wire 1 & clk $end
$var wire 8 4 data_in_A [7:0] $end
$var wire 8 5 data_in_B [7:0] $end
$var wire 8 6 data_out_A [7:0] $end
$var wire 8 7 data_out_B [7:0] $end
$var wire 1 . we_A $end
$var wire 1 / we_B $end
$var reg 4 8 address_register_A [3:0] $end
$var reg 4 9 address_register_B [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10100 #
$end
#0
$dumpvars
bx 9
bx 8
bx 7
bx 6
b0 5
b0 4
b0 3
b0 2
b10000000000000000000000000000011 1
b1001 0
1/
1.
b1 -
b0 ,
bx +
bx *
b0 )
b0 (
b1001001010011100100100101010100 '
0&
b0 %
b0 $
bx "
bx !
$end
#100
1&
#200
0&
#250
b10 -
b11110011 )
b11110011 5
b1 %
b1 3
b11110000 (
b11110000 4
b10101110101001001011111010000010101111101010111010100100101111101000010 '
#300
1&
#400
0&
#450
b11 -
b11001111 )
b11001111 5
b11 %
b11 3
b1111 (
b1111 4
b1 $
b1 2
#500
1&
#600
0&
#650
b100 -
b11101010 )
b11101010 5
b1111 %
b1111 3
b10101010 (
b10101010 4
b1110 $
b1110 2
#700
1&
#800
0&
#850
b101 -
b1111 +
bx )
bx 5
b1 %
b1 3
0/
b11110000 *
bx (
bx 4
b0 $
b0 2
0.
b10100100100010001011111010000010101111101010010010001000101111101000010 '
#900
b11110000 "
b11110000 6
b0 8
b1111 !
b1111 7
b1 9
1&
#1000
0&
#1050
b110 -
b11001111 +
b11 %
b11 3
b1111 *
b1 $
b1 2
#1100
b11001111 !
b11001111 7
b11 9
b1111 "
b1111 6
b1 8
1&
#1200
0&
#1250
b111 -
b11101010 +
b1111 %
b1111 3
b10101010 *
b1110 $
b1110 2
#1300
b10101010 "
b10101010 6
b1110 8
b11101010 !
b11101010 7
b1111 9
1&
#1400
0&
#1450
b1000 -
b10101010 +
b1110 %
b1110 3
b111 (
b111 4
b1001 $
b1001 2
1.
b10101110101001001011111010000010101111101010010010001000101111101000010 '
#1500
b10101010 !
b10101010 7
b1110 9
1&
#1600
0&
#1650
b1001 -
b111 +
b1001 %
b1001 3
b11111010 (
b11111010 4
b1111 $
b1111 2
#1700
b111 !
b111 7
b1001 9
1&
#1800
0&
#1850
b1010 -
b11111010 +
b1111 %
b1111 3
b11 (
b11 4
b1100 $
b1100 2
#1900
b11111010 !
b11111010 7
b1111 9
1&
#2000
0&
#2050
b1011 -
b0 +
b0 )
b0 5
1/
b1111 (
b1111 4
b10 $
b10 2
b10101110101001001011111010000010101111101010111010100100101111101000010 '
#2100
b0 !
b0 7
1&
#2200
0&
#2250
b1100 -
b11000 )
b11000 5
b1 %
b1 3
b11000 *
bx (
bx 4
b1 $
b1 2
0.
b10100100100010001011111010000010101111101010111010100100101111101000010 '
#2300
b11000 "
b11000 6
b1 8
1&
#2400
0&
#2450
b1101 -
bx )
bx 5
b1111 %
b1111 3
0/
b0 *
b1111 $
b1111 2
b10100100100010001011111010000010101111101010010010001000101111101000010 '
#2500
b0 "
b0 6
b1111 8
1&
#2600
0&
#2650
b1110 -
b11000 +
b1 %
b1 3
b11000 *
b1 $
b1 2
#2700
b11000 !
b11000 7
b1 9
b11000 "
b11000 6
b1 8
1&
#2800
0&
#2850
b11111111111111111111111111111111 0
