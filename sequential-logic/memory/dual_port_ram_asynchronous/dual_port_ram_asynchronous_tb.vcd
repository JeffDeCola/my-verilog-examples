$date
	Sun May 21 14:34:00 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module DUAL_PORT_RAM_ASYNCHRONOUS_TB $end
$var wire 8 ! DATA_OUT_B [7:0] $end
$var wire 8 " DATA_OUT_A [7:0] $end
$var parameter 32 # CLKPERIOD_A $end
$var parameter 32 $ CLKPERIOD_B $end
$var reg 4 % ADDR_A [3:0] $end
$var reg 4 & ADDR_B [3:0] $end
$var reg 1 ' CLK_A $end
$var reg 1 ( CLK_B $end
$var reg 256 ) COMMENT_A [255:0] $end
$var reg 256 * COMMENT_B [255:0] $end
$var reg 8 + DATA_IN_A [7:0] $end
$var reg 8 , DATA_IN_B [7:0] $end
$var reg 8 - DATA_OUTEXP_A [7:0] $end
$var reg 8 . DATA_OUTEXP_B [7:0] $end
$var reg 32 / ERRORS_A [31:0] $end
$var reg 32 0 ERRORS_B [31:0] $end
$var reg 32 1 VECTORCOUNT_A [31:0] $end
$var reg 32 2 VECTORCOUNT_B [31:0] $end
$var reg 1 3 WE_A $end
$var reg 1 4 WE_B $end
$var integer 32 5 COUNT_A [31:0] $end
$var integer 32 6 COUNT_B [31:0] $end
$var integer 32 7 END_A [31:0] $end
$var integer 32 8 END_B [31:0] $end
$var integer 32 9 FD_A [31:0] $end
$var integer 32 : FD_B [31:0] $end
$scope module UUT_dual_port_ram_asynchronous_behavioral $end
$var wire 4 ; addr_A [3:0] $end
$var wire 4 < addr_B [3:0] $end
$var wire 1 ' clk_A $end
$var wire 1 ( clk_B $end
$var wire 8 = data_in_A [7:0] $end
$var wire 8 > data_in_B [7:0] $end
$var wire 1 3 we_A $end
$var wire 1 4 we_B $end
$var parameter 32 ? ADDR_WIDTH $end
$var parameter 32 @ DATA_WIDTH $end
$var parameter 32 A MEM_DEPTH $end
$var reg 8 B data_out_A [7:0] $end
$var reg 8 C data_out_B [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 A
b1000 @
b100 ?
b1111 $
b10100 #
$end
#0
$dumpvars
bx C
bx B
b0 >
b0 =
b0 <
b0 ;
b10000000000000000000000000000100 :
b10000000000000000000000000000011 9
b0 8
b0 7
b101 6
b101 5
14
13
b1 2
b1 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b1001001010011100100100101010100 *
b100100101001110010010010101010001011111 )
0(
0'
b0 &
b0 %
bx "
bx !
$end
#70
b0 !
b0 C
1(
#100
b0 "
b0 B
1'
#140
0(
#190
b10 2
b11110011 .
b11110011 ,
b11110011 >
b1 &
b1 <
b1010111010100100101111101000010 *
#200
0'
#210
b11110011 !
b11110011 C
1(
#250
b10 1
b11110000 -
b11110000 +
b11110000 =
b101011101010010010111110100000101011111 )
#280
0(
#300
b11110000 "
b11110000 B
1'
#330
b11 2
b11001111 .
b11001111 ,
b11001111 >
b11 &
b11 <
#350
b11001111 !
b11001111 C
1(
#400
0'
#420
0(
#450
b11 1
b1111 -
b1111 +
b1111 =
b1 %
b1 ;
#470
b100 2
b11101010 .
b11101010 ,
b11101010 >
b1110 &
b1110 <
#490
b11101010 !
b11101010 C
1(
#500
b1111 "
b1111 B
1'
#560
0(
#600
0'
#610
b101 2
bx ,
bx >
04
b1010010010001000101111101000010 *
#630
1(
#650
b100 1
b10101010 -
b10101010 +
b10101010 =
b1110 %
b1110 ;
#700
b10101010 "
b10101010 B
0(
1'
#750
b110 2
b11001111 .
b11 &
b11 <
#770
b11001111 !
b11001111 C
1(
#800
0'
#840
0(
#850
b101 1
bx +
bx =
03
b101001001000100010111110100000101011111 )
#890
b111 2
bx .
b1111 &
b1111 <
#900
1'
#910
bx !
bx C
1(
#980
0(
#1000
0'
#1030
b1000 2
b11001111 .
b11 &
b11 <
#1050
b11001111 !
b11001111 C
b110 1
b1111 -
b1 %
b1 ;
1(
#1100
b1111 "
b1111 B
1'
#1120
0(
#1170
b1001 2
bx .
b1001 &
b1001 <
#1190
bx !
bx C
1(
#1200
0'
#1250
b111 1
b11001111 -
b11 %
b11 ;
#1260
0(
#1300
b11001111 "
b11001111 B
1'
#1310
b1010 2
b1111 &
b1111 <
#1330
1(
#1400
0(
0'
#1450
b1011 2
b1000000 .
b1000000 ,
b1000000 >
14
b1010111010100100101111101000010 *
b1000 1
b111 -
b111 +
b111 =
b1001 %
b1001 ;
13
b101011101010010010111110100000101011111 )
#1470
b1000000 !
b1000000 C
1(
#1500
b111 "
b111 B
1'
#1540
0(
#1590
b1100 2
b11000 .
b11000 ,
b11000 >
b1 &
b1 <
#1600
0'
#1610
b11000 !
b11000 C
1(
#1650
b1001 1
b11111010 -
b11111010 +
b11111010 =
b1111 %
b1111 ;
#1680
0(
#1700
b11111010 "
b11111010 B
1'
#1730
b1101 2
bx ,
bx >
04
b1010010010001000101111101000010 *
#1750
1(
#1800
0'
#1820
0(
#1850
b1010 1
b11 -
b11 +
b11 =
b1100 %
b1100 ;
#1870
b1110 2
#1890
1(
#1900
b11 "
b11 B
1'
#1960
0(
#2000
0'
#2010
b1 8
b11111111111111111111111111111111 6
#2030
1(
#2050
b1011 1
b1111 -
b1111 +
b1111 =
b10 %
b10 ;
#2100
b1111 "
b1111 B
0(
1'
#2170
1(
#2200
0'
#2240
0(
#2250
b1100 1
b11000 -
bx +
bx =
b1 %
b1 ;
03
b101001001000100010111110100000101011111 )
#2300
b11000 "
b11000 B
1'
#2310
1(
#2380
0(
#2400
0'
#2450
b1101 1
1(
#2500
1'
#2520
0(
#2590
1(
#2600
0'
#2650
b1110 1
#2660
0(
#2700
1'
#2730
1(
#2800
0(
0'
#2850
b1 7
b11111111111111111111111111111111 5
