$date
	Sun May 21 23:03:01 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module LIFO_SYNCHRONOUS_TB $end
$var wire 1 ! FULL $end
$var wire 1 " EMPTY $end
$var wire 8 # DATA_OUT [7:0] $end
$var parameter 32 $ CLKPERIOD $end
$var reg 1 % CLK $end
$var reg 256 & COMMENT [255:0] $end
$var reg 8 ' DATA_IN [7:0] $end
$var reg 8 ( DATA_OUTEXP [7:0] $end
$var reg 1 ) EMPTYEXP $end
$var reg 32 * ERRORS [31:0] $end
$var reg 1 + FULLEXP $end
$var reg 1 , POP $end
$var reg 1 - PUSH $end
$var reg 1 . RST $end
$var reg 32 / VECTORCOUNT [31:0] $end
$var integer 32 0 COUNT [31:0] $end
$var integer 32 1 FD [31:0] $end
$scope module UUT_lifo_synchronous_structural $end
$var wire 1 % clk $end
$var wire 8 2 data_in [7:0] $end
$var wire 1 , pop $end
$var wire 1 - push $end
$var wire 1 . rst $end
$var wire 4 3 wrt_ptr [3:0] $end
$var wire 1 4 w_next $end
$var wire 4 5 rd_ptr [3:0] $end
$var wire 1 6 r_next $end
$var wire 1 ! full $end
$var wire 1 " empty $end
$var wire 8 7 data_out [7:0] $end
$var parameter 1 8 zero $end
$var parameter 8 9 zeros $end
$scope module compare_and_status_logic $end
$var wire 4 : wrt_ptr [3:0] $end
$var parameter 4 ; depth $end
$var reg 1 " empty $end
$var reg 1 ! full $end
$upscope $end
$scope module dual_port_ram_synchronous $end
$var wire 1 % clk $end
$var wire 8 < data_in_A [7:0] $end
$var wire 8 = data_in_B [7:0] $end
$var wire 1 - we_A $end
$var wire 1 > we_B $end
$var wire 4 ? addr_B [3:0] $end
$var wire 4 @ addr_A [3:0] $end
$var parameter 32 A ADDR_WIDTH $end
$var parameter 32 B DATA_WIDTH $end
$var parameter 32 C MEM_DEPTH $end
$var reg 8 D data_out_A [7:0] $end
$var reg 8 E data_out_B [7:0] $end
$upscope $end
$scope module read_logic $end
$var wire 1 " empty $end
$var wire 1 , re $end
$var reg 1 6 r_next $end
$upscope $end
$scope module stack_ptr_control $end
$var wire 1 % clk $end
$var wire 1 6 r_next $end
$var wire 1 . rst $end
$var wire 1 4 w_next $end
$var reg 4 F rd_ptr [3:0] $end
$var reg 4 G wrt_ptr [3:0] $end
$upscope $end
$scope module write_logic $end
$var wire 1 ! full $end
$var wire 1 - we $end
$var reg 1 4 w_next $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 C
b1000 B
b100 A
b1111 ;
b0 9
08
b10100 $
$end
#0
$dumpvars
bx G
bx F
bx E
bx D
bx @
bx ?
0>
b0 =
bx <
bx :
bx 7
06
bx 5
04
bx 3
bx 2
b10000000000000000000000000000011 1
b1000 0
b1 /
0.
0-
0,
x+
b0 *
x)
bx (
bx '
b1001001010011100100100101010100 &
0%
bx #
x"
x!
$end
#100
1%
#200
0%
#250
b10 /
1)
0+
1.
b101001001000101010100110100010101010100 &
#300
1"
0!
b0 5
b0 ?
b0 F
b0 3
b0 :
b0 @
b0 G
1%
#400
0%
#450
14
b11 /
0)
b1111 '
b1111 2
b1111 <
1-
0.
b10100000101010101010011010010000010110100110001 &
#500
0"
b1111 D
b1 3
b1 :
b1 @
b1 G
1%
#600
0%
#650
b100 /
b1111 (
b11110000 '
b11110000 2
b11110000 <
b10100000101010101010011010010000010110100110010 &
#700
b1 5
b1 ?
b1 F
b10 3
b10 :
b10 @
b10 G
b1111 #
b1111 7
b1111 E
b11110000 D
1%
#800
0%
#850
b101 /
b11110000 (
b10101010 '
b10101010 2
b10101010 <
b10100000101010101010011010010000010110100110011 &
#900
b10101010 D
b11110000 #
b11110000 7
b11110000 E
b10 5
b10 ?
b10 F
b11 3
b11 :
b11 @
b11 G
1%
#1000
0%
#1050
04
b110 /
b10101010 (
bx '
bx 2
bx <
0-
b101101 &
#1100
b10101010 #
b10101010 7
b10101010 E
bx D
1%
#1200
0%
#1250
b111 /
#1300
1%
#1400
0%
#1450
b1000 /
#1500
1%
#1600
0%
#1650
16
b1001 /
1,
b101000001001111010100000010110100110011 &
#1700
b1 5
b1 ?
b1 F
b10 3
b10 :
b10 @
b10 G
1%
#1800
0%
#1850
b1010 /
b11110000 (
b101000001001111010100000010110100110010 &
#1900
b0 5
b0 ?
b0 F
b1 3
b1 :
b1 @
b1 G
b11110000 #
b11110000 7
b11110000 E
b10101010 D
1%
#2000
0%
#2050
b1011 /
b1111 (
1)
b101000001001111010100000010110100110001 &
#2100
06
1"
b11110000 D
b1111 #
b1111 7
b1111 E
b0 3
b0 :
b0 @
b0 G
1%
#2200
0%
#2250
b1100 /
b101000001001111010100000010110101001110010101010100110001001100 &
#2300
b1111 D
1%
#2400
0%
#2450
b1101 /
#2500
1%
#2600
0%
#2650
b1110 /
#2700
1%
#2800
0%
#2850
b1111 /
0,
b101101 &
#2900
1%
#3000
0%
#3050
b10000 /
#3100
1%
#3200
0%
#3250
b10001 /
#3300
1%
#3400
0%
#3450
14
b10010 /
0)
b1111 '
b1111 2
b1111 <
1-
b10100000101010101010011010010000010110100110001 &
#3500
0"
b1 3
b1 :
b1 @
b1 G
1%
#3600
0%
#3650
b10011 /
b11110000 '
b11110000 2
b11110000 <
b10100000101010101010011010010000010110100110010 &
#3700
b11110000 D
b1 5
b1 ?
b1 F
b10 3
b10 :
b10 @
b10 G
1%
#3800
0%
#3850
b10100 /
b11110000 (
b10101010 '
b10101010 2
b10101010 <
b10100000101010101010011010010000010110100110011 &
#3900
b10 5
b10 ?
b10 F
b11 3
b11 :
b11 @
b11 G
b11110000 #
b11110000 7
b11110000 E
b10101010 D
1%
#4000
0%
#4050
b10101 /
b10101010 (
b1001111 '
b1001111 2
b1001111 <
b10100000101010101010011010010000010110100110100 &
#4100
b1001111 D
b10101010 #
b10101010 7
b10101010 E
b11 5
b11 ?
b11 F
b100 3
b100 :
b100 @
b100 G
1%
#4200
0%
#4250
b10110 /
b1001111 (
b11110000 '
b11110000 2
b11110000 <
b10100000101010101010011010010000010110100110101 &
#4300
b100 5
b100 ?
b100 F
b101 3
b101 :
b101 @
b101 G
b1001111 #
b1001111 7
b1001111 E
b11110000 D
1%
#4400
0%
#4450
16
04
b10111 /
b11110000 (
1,
bx '
bx 2
bx <
0-
b101000001001111010100000010110100110101 &
#4500
bx D
b11110000 #
b11110000 7
b11110000 E
b11 5
b11 ?
b11 F
b100 3
b100 :
b100 @
b100 G
1%
#4600
0%
#4650
b11000 /
b1001111 (
b101000001001111010100000010110100110100 &
#4700
b10 5
b10 ?
b10 F
b11 3
b11 :
b11 @
b11 G
b1001111 #
b1001111 7
b1001111 E
b11110000 D
1%
#4800
0%
#4850
06
14
b11001 /
b10101010 (
0,
b10101011 '
b10101011 2
b10101011 <
1-
b10100000101010101010011010010000010110100110100 &
#4900
b10101011 D
b10101010 #
b10101010 7
b10101010 E
b11 5
b11 ?
b11 F
b100 3
b100 :
b100 @
b100 G
1%
#5000
0%
#5050
b11010 /
b10101011 (
b1110 '
b1110 2
b1110 <
b10100000101010101010011010010000010110100110101 &
#5100
b100 5
b100 ?
b100 F
b101 3
b101 :
b101 @
b101 G
b10101011 #
b10101011 7
b10101011 E
b1110 D
1%
#5200
0%
#5250
b11011 /
b1110 (
b11110001 '
b11110001 2
b11110001 <
b10100000101010101010011010010000010110100110110 &
#5300
b11110001 D
b1110 #
b1110 7
b1110 E
b101 5
b101 ?
b101 F
b110 3
b110 :
b110 @
b110 G
1%
#5400
0%
#5450
b11100 /
b11110001 (
b10101000 '
b10101000 2
b10101000 <
b10100000101010101010011010010000010110100110111 &
#5500
b110 5
b110 ?
b110 F
b111 3
b111 :
b111 @
b111 G
b11110001 #
b11110001 7
b11110001 E
b10101000 D
1%
#5600
0%
#5650
b11101 /
b10101000 (
b10111000 '
b10111000 2
b10111000 <
b10100000101010101010011010010000010110100111000 &
#5700
b10111000 D
b10101000 #
b10101000 7
b10101000 E
b111 5
b111 ?
b111 F
b1000 3
b1000 :
b1000 @
b1000 G
1%
#5800
0%
#5850
b11110 /
b10111000 (
b10100000101010101010011010010000010110100111001 &
#5900
b1000 5
b1000 ?
b1000 F
b1001 3
b1001 :
b1001 @
b1001 G
b10111000 #
b10111000 7
b10111000 E
1%
#6000
0%
#6050
b11111 /
b1010000010101010101001101001000001011010011000100110000 &
#6100
b1001 5
b1001 ?
b1001 F
b1010 3
b1010 :
b1010 @
b1010 G
1%
#6200
0%
#6250
b100000 /
b1010000010101010101001101001000001011010011000100110001 &
#6300
b1010 5
b1010 ?
b1010 F
b1011 3
b1011 :
b1011 @
b1011 G
1%
#6400
0%
#6450
b100001 /
b10111001 '
b10111001 2
b10111001 <
b1010000010101010101001101001000001011010011000100110010 &
#6500
b10111001 D
b1011 5
b1011 ?
b1011 F
b1100 3
b1100 :
b1100 @
b1100 G
1%
#6600
0%
#6650
b100010 /
b10111001 (
b10111010 '
b10111010 2
b10111010 <
b1010000010101010101001101001000001011010011000100110011 &
#6700
b1100 5
b1100 ?
b1100 F
b1101 3
b1101 :
b1101 @
b1101 G
b10111001 #
b10111001 7
b10111001 E
b10111010 D
1%
#6800
0%
#6850
b100011 /
b10111010 (
b10111100 '
b10111100 2
b10111100 <
b1010000010101010101001101001000001011010011000100110100 &
#6900
b10111100 D
b10111010 #
b10111010 7
b10111010 E
b1101 5
b1101 ?
b1101 F
b1110 3
b1110 :
b1110 @
b1110 G
1%
#7000
0%
#7050
b100100 /
b10111100 (
b110000 '
b110000 2
b110000 <
1+
b1010000010101010101001101001000001011010011000100110101 &
#7100
04
1!
b1110 5
b1110 ?
b1110 F
b1111 3
b1111 :
b1111 @
b1111 G
b10111100 #
b10111100 7
b10111100 E
b110000 D
1%
#7200
0%
#7250
b100101 /
b110000 (
b1011000 '
b1011000 2
b1011000 <
b10100000101010101010011010010000010110101001110010101010100110001001100 &
#7300
b1011000 D
b110000 #
b110000 7
b110000 E
1%
#7400
0%
#7450
b100110 /
b1011 '
b1011 2
b1011 <
#7500
b1011 D
1%
#7600
0%
#7650
b100111 /
b11111 '
b11111 2
b11111 <
#7700
b11111 D
1%
#7800
0%
#7850
b101000 /
bx '
bx 2
bx <
0-
b101101 &
#7900
1%
#8000
0%
#8050
b101001 /
#8100
1%
#8200
0%
#8250
b101010 /
#8300
1%
#8400
0%
#8450
16
b101011 /
1,
0+
b10100000100111101010000001011010011000100110101 &
#8500
0!
b1101 5
b1101 ?
b1101 F
b1110 3
b1110 :
b1110 @
b1110 G
1%
#8600
0%
#8650
b101100 /
b10111100 (
b10100000100111101010000001011010011000100110100 &
#8700
b1100 5
b1100 ?
b1100 F
b1101 3
b1101 :
b1101 @
b1101 G
b10111100 #
b10111100 7
b10111100 E
b110000 D
1%
#8800
0%
#8850
b101101 /
b10111010 (
b10100000100111101010000001011010011000100110011 &
#8900
b10111100 D
b10111010 #
b10111010 7
b10111010 E
b1011 5
b1011 ?
b1011 F
b1100 3
b1100 :
b1100 @
b1100 G
1%
#9000
0%
#9050
b101110 /
b10111001 (
b10100000100111101010000001011010011000100110010 &
#9100
b1010 5
b1010 ?
b1010 F
b1011 3
b1011 :
b1011 @
b1011 G
b10111001 #
b10111001 7
b10111001 E
b10111010 D
1%
#9200
0%
#9250
b11111111111111111111111111111111 0
